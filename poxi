#!/bin/bash
# COMMAND NAME: POXI
__VERSION="0.1"

SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
CURRENT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
SCRIPT_DIR="$CURRENT_DIR/src"
SCRIPT_NAME="$(basename $0)"

## ==> sourcing all scripts <==
sh_files=()

for item in $(find $SCRIPT_DIR -name "*.sh" -type f -exec basename {} \;); do 
    # with 'ignore_' as prefix to filename
    if [[ ! "$item" =~ ^(ignore.*\.sh|temp.*\.sh|$SCRIPT_NAME)$ ]]; then
        source "$SCRIPT_DIR/$item"
    fi
    
done

FILENAME=""

usage() {
    cat <<EOF
Usage: $0 [OPTIONS] [COMMAND] [PACKAGES]

Other options:
  -v, --version              Show version
  -h, --help                 Show this help message
  -a, --accept-all           Accept all packages
  -f, --file fileame         Packages json file 

Command options:
  install [pkg [pkg pkg]]    Install packages
  remove  [pkg [pkg pkg]]    Remove packages
  update                     Update system
EOF
    exit 1
}

# make sure packages.json file is availabe
check_json_file

function main {
    local opts
    local short_options='vahf:'
    local long_options='version,accept-all,help,file:'
    if ! opts=$(getopt -o $short_options --long $long_options -n "$0" -- "$@"); then
        echo "Error: Invalid options passed!" >&2
        usage
    fi
    eval set -- "$opts"
    while true; do
        case "$1" in
            -a|--accept-all)
                ACCEPT_ALL=true
                shift 1
                ;;
            -f|--file)
                FILENAME="$2"
                if [[ -f $FILENAME ]]; then
                    echo "file name is : $FILENAME"
                else
                    printf "${COLORS['red']}Error:${COLORS['reset']} '%s' is invalid file name.\n\t-f option require valid file name.\n" "$FILENAME" >&2
                    exit 1
                fi
                shift 2
                ;;
            -h|--help)
                usage
                ;;
            -v|--version)
                printf "%s ${COLORS['green']}v%s${COLORS['reset']}\n" "${0##*/}" "$__VERSION"
                exit 0
                ;;
            --)
                shift 1
                break
                ;;
            *)
                echo "Internal error while parsing options!" >&2
                exit 1
                ;;
        esac
    done

    case "$1" in
        install)
            shift 1
            if [[ -n "$FILENAME" && -f "$FILENAME" ]]; then
                if [[ "$(jq -r 'has("poxi_installed") and (.poxi_installed | length != 0)' "$FILENAME")" == 'true' ]]; then
                    local installed_packages=()
                    while IFS= read -r pkg; do
                        installed_packages+=("$pkg")
                    done < <(jq -r ".poxi_installed.$DESKTOP[]" $FILENAME)
                    echo "installed packages: ${installed_packages[@]}"
                    install_pkg ${installed_packages[@]}
                fi
            else
                install_pkg $@
            fi
            ;;
        remove)
            shift 1
            if [[ -n "$FILENAME" && -f "$FILENAME" ]]; then
                if [[ "$(jq -r 'has("poxi_installed") and (.poxi_installed | length != 0)' "$FILENAME")" == 'true' ]]; then
                    local removed_packages=()
                    while IFS= read -r pkg; do
                        removed_packages+=("$pkg")
                    done < <(jq -r ".poxi_installed.$DESKTOP[]" $FILENAME)
                    echo "removed packages: ${removed_packages[@]}"
                    remove_pkg ${removed_packages[@]}
                fi
            else
                remove_pkg $@
            fi
            ;;
        update)
            shift 1
            update_pkg
            ;;
        *)
            echo "Unknown command"
            shift 1
            ;;
    esac

}

main $@